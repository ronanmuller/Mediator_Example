variables:
  # !!! THIS SECTION SHOULDN'T NEED TO BE CHANGED !!!
  THE_PROXY: http://$PROXY_USERNAME:$PROXY_PASSWORD_ENCODED@proxy.us.dell.com:80

  # From harbor.sausmpc01.pcf.dell.com/docker-store
  CF_CLI_IMAGE: $CI_REGISTRY_DEVOPS/cf-cli-plugins-devops:1-lts_v4.3.0
  DOTNET_IMAGE: $CI_REGISTRY_DEVOPS/dotnet-devops:3.1-sdk-lts_v4.3.0
  JMETER_IMG: $CI_REGISTRY_DEVOPS/jmeter-devops:5_v4.4.0
  JFROG_IMG: $CI_REGISTRY_DEVOPS/jfrog-cli-devops:3.2.0_v4.3.0
  OCTO_CLI_VERSION: 6.7.0

  # PCF instances
  #PCF_URL_P2: https://api.sp2.pcf.dell.com/  not needed, will be deleted, use API_URL_P2. 
  #PCF_URL_S2: https://api.ss2.pcf.dell.com/  not needed, will be deletedm use API_URL_S2.
  DOMAIN_NP_AMER: r2.pcf.dell.com
  DOMAIN_NP_EMEA: r2.pcf.dell.com
  DOMAIN_NP_APJ: r2.pcf.dell.com
  DOMAIN_NP: r2.pcf.dell.com
  DOMAIN_NP_PRIVATE: np-dcqo.dell.com
  DOMAIN_GTM: g2p.pcf.dell.com
  DOMAIN_GTM_PRIVATE: dcqo.dell.com
  DOMAIN_P2:  p2.pcf.dell.com
  DOMAIN_S2:  s2.pcf.dell.com
  API_URL_NP: api.sr2.pcf.dell.com
  
  # prod instace
  API_URL_P2: api.sp2.pcf.dell.com
  API_URL_P2_AMER: api.sp2.pcf.dell.com
  API_URL_P2_EMEA: api.sp2.pcf.dell.com
  API_URL_P2_APJ: api.sp2.pcf.dell.com
  API_URL_S2: api.ss2.pcf.dell.com
  API_URL_S2_AMER: api.ss2.pcf.dell.com
  API_URL_S2_EMEA: api.ss2.pcf.dell.com
  API_URL_S2_APJ: api.ss2.pcf.dell.com
  
  # Launch layer instance
  API_URL_P2_LAUNCH_GLOBAL: api.sp2.pcf.dell.com
  API_URL_P2_LAUNCH_AMER: api.sp2.pcf.dell.com
  API_URL_P2_LAUNCH_EMEA: api.sp2.pcf.dell.com
  API_URL_P2_LAUNCH_APJ: api.sp2.pcf.dell.com
  API_URL_S2_LAUNCH_GLOBAL: api.ss2.pcf.dell.com
  API_URL_S2_LAUNCH_AMER: api.ss2.pcf.dell.com
  API_URL_S2_LAUNCH_EMEA: api.ss2.pcf.dell.com
  API_URL_S2_LAUNCH_APJ: api.ss2.pcf.dell.com

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  # Project related variables
  APP_NAME: item-svc-v1
  TEMP_APP_NAME: item-svc-v1-green

  # git project variables
  TARGET_ITEM: targetItem
  TARGET_NUGET: targetNuget
  TARGET_OCTO: targetOcto

  # Deployment Manifest file name and path
  MANIFEST_NP:  pcf-configs/manifest-np.yml
  MANIFEST_NP_AMER:  pcf-configs/manifest-amer-np.yml
  MANIFEST_NP_EMEA:  pcf-configs/manifest-emea-np.yml
  MANIFEST_NP_APJ:  pcf-configs/manifest-apj-np.yml
  
  MANIFEST_PROD_GLOBAL: pcf-configs/manifest-p.yml
  MANIFEST_PROD_AMER: pcf-configs/manifest-amer-p.yml
  MANIFEST_PROD_EMEA: pcf-configs/manifest-emea-p.yml
  MANIFEST_PROD_APJ: pcf-configs/manifest-apj-p.yml

  MANIFEST_LAUNCH_GLOBAL: pcf-configs/manifest-launch.yml
  MANIFEST_LAUNCH_AMER: pcf-configs/manifest-amer-launch.yml
  MANIFEST_LAUNCH_EMEA: pcf-configs/manifest-emea-launch.yml
  MANIFEST_LAUNCH_APJ: pcf-configs/manifest-apj-launch.yml
  
  # Deployment non prod variables
  ORG_NP: DcqoItemOrg
  ORG_NP_AMER: DcqoItemOrg  # we need to get separate org for amer. 
  ORG_NP_EMEA: DcqoItemEmeaOrg
  ORG_NP_APJ: DcqoItemApjOrg
  
  SPACE_NP: Item-V1

  APP_ENV_DEV: dit1        # check/change here dev value (dev1, dit1) before running pipeline to target dev env.
  APP_ENV_DEV_AMER: amer-dit1
  APP_ENV_DEV_EMEA: emea-dit1
  APP_ENV_DEV_APJ: apj-dit1
  APP_ENV_SIT: g4           # check/change here sit env value (g1, g3, g4) before running pipeline to target sit env.
  APP_ENV_SIT_AMER: amer-g4
  APP_ENV_SIT_EMEA: emea-g4
  APP_ENV_SIT_APJ: apj-g4
  APP_ENV_PERF_GLOBAL: perf
  APP_ENV_PERF_AMER: amer-perf
  APP_ENV_PERF_EMEA: emea-perf
  APP_ENV_PERF_APJ: apj-perf
  
  # Deployment launch and prod variables
  # Prod Env. Variables
  APP_ENV_PROD_GLOBAL: prod
  APP_ENV_PROD_AMER: amer-prod 
  APP_ENV_PROD_EMEA: emea-prod 
  APP_ENV_PROD_APJ: apj-prod

  # These variables will be used to control access in the ci/cd protected environments
  DEPLOYMENT_TIER_PROD_NAME_P2: PROD-PC1
  DEPLOYMENT_TIER_PROD_NAME_S2: PROD-S3B
  DEPLOYMENT_TIER_STAGE_NAME_LAUNCH_P2: LAUNCH-PC1
  DEPLOYMENT_TIER_STAGE_NAME_LAUNCH_S2: LAUNCH-S3B
  DEPLOYMENT_TIER_TEST_NAME_SIT: GE4       # check/change here sit env value (GE1, GE3, GE4) before running pipeline to target sit env. 
  DEPLOYMENT_TIER_TEST_NAME_PERF: PERF
  DEPLOYMENT_TIER_DEV_NAME_DEV: DIT1       # check/change here dev value (dev1, dit1) before running pipeline to target dev env.
 
  # Prod Org Name
  ORG_PROD: DcqoItemOrg  # this is for global instance org. 
  ORG_PROD_AMER: DcqoItmArOrg
  ORG_PROD_EMEA: DcqoItemEMEAOrg
  ORG_PROD_APJ: DcqoItemAPJOrg

  # Prod Space Name
  SPACE_PROD: Item-V1
  
  # Launch Org Name
  ORG_LAUNCH_GLOBAL: DcqoItmLchOrg
  ORG_LAUNCH_AMER: DcqoItmArLchOrg
  ORG_LAUNCH_EMEA: DcqoItmEaLchOrg
  ORG_LAUNCH_APJ: DcqoItmAjLchOrg
  
  # Launch Space Name
  SPACE_LAUNCH: Item-V1
  
  # Launch Env. Variables
  APP_ENV_LAUNCH_GLOBAL: launch
  APP_ENV_LAUNCH_AMER: amer-launch 
  APP_ENV_LAUNCH_EMEA: emea-launch 
  APP_ENV_LAUNCH_APJ: apj-launch

  # If you have the same variable names in your Gitlab Group/Project environment variables
  # then delete these, otherwise just set these variables with your variable names.
  CF_PROD_USERNAME: $PCF_PROD_USER
  CF_PROD_PASSWORD: $PCF_PROD_PWD
  CF_NONPROD_USERNAME: $PCF_NON_PROD_USER
  CF_NONPROD_PASSWORD: $PCF_NON_PROD_PWD

  # VAULT access
  VAULT_ADDR: $NON_PROD_VAULT_ADDR
  VAULT_ROLE_ID: $NON_PROD_VAULT_ROLE_ID
  VAULT_SECRET_ID: $NON_PROD_VAULT_SECRET_ID


  # octopus variables
  OCTO_URL: http://dcsoctopus.dell.com/
  OCTO_BUILD_NUMBER: 1.0.0
  OCTO_API_KEY: $OCTO_API_KEY
  OCTO_PROJ_NAME: dcqo-item-service-v1

  # Build
  BUILD_CONFIGURATION: release
  BUILD_CSPROJ: Dell.Item.WebApi/Dell.Item.WebApi.csproj
  BUILD_VERSION_NUMBER: 1.0.0

  # Sonar Scan
  SONAR_HOST: https://sonarqube.dell.com
  SONAR_PROJECT_NAME: item-service-v1
  #SONAR_LOGIN_TOKEN: $SONARQUBE_ADMIN_TOKEN
  #SONAR_HOST: $SONARQUBE_URL
  UNIT_TEST_DIR: Dell.Item.Tests
  COVERAGE_FILE: Dell.Item.Tests/coverage.opencover.xml
  SONAR_EXCLUSIONS: "*.xml,**/Dell.Item.WebApi/**,**/Dell.Item/Provider/Config/**,**/Dell.Item/Provider/SnP/**"

  # Fortify Scan
  FORTIFY_ID: 15960
  FORTIFY_TOKEN: $FORTIFY_LOGIN_TOKEN

  # integration-test
  # INT_TEST_DIR: 'Dell.Item.Integration.Tests'
  # INTEGRATION_TEST_PROJ: 'Dell.Item.Integration.Tests.csproj'

  # NewRelic variables - delete this when the revierbed-aternity is fully implement. 
  NEW_RELIC_DOWNLOAD_URL: https://dcsartifacts.dell.com/artifactory/dicf/newrelic-netcore20-agent_8.30.0.0_amd64.tar.gz
  NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "true"

  # Riverbed variables
  SSO_IDENTITY_PROVIDERS: dell-sso
  RVBD_APP_CONFIG: PCFDefault
  RVBD_ANALYSIS_SERVER_NP: parser-riverbednp.us.dell.com
  RVBD_ANALYSIS_SERVER_PROD: parser-riverbed.us.dell.com
  RVBD_CT_TROUX_ID: 1000998
  RVBD_CT_LOGICAL_SERVER_NP: DCQO_ITEM_NONPROD
  RVBD_CT_LOGICAL_SERVER_LCH: DCQO_ITEM_LAUNCH
  RVBD_CT_LOGICAL_SERVER_PROD: DCQO_ITEM

  # package
  DCS_ARTIFACTORY: https://dcsartifacts.dell.com/artifactory
  WEBCONFIGTRANSFORMER: "https://dcsartifacts.dell.com/artifactory/zip-local/WebConfigTransformer.zip" 
  VAULT_INDEX: 'https://dcsartifacts.dell.com/artifactory/api/pypi/devops-shared-python/simple'

  #vm Deployment variables  
  APPPOOL_NAME: "QuoteItemGateway" 
  APPPOOL_DotNetVersion: "No Managed Code"  
  APPPOOL_Enable32BitApps: "False"  
  APPPOOL_ManagedPipelineMode: "Integrated" 
  APPPOOL_QueueLength: "1000" 
  APPPOOL_DeleteExisting: "False" 
  SITES_NAME: "QuoteItemGateway" 
  SITES_APPPOOL: "QuoteItemGateway"  
  SITES_BindingPort: "1008,80" 
  SITES_PhysicalPath: E:\inetpub\servicesroot\Gitlab\Dell.Item.WebApi.Core\1.0.0.$CI_PIPELINE_ID  
  SITES_AnonymousAuth: "True" 
  SITES_WindowsAuth: "false"  
  SITES_BasicAuth: "False"  
  SITES_AspNetImpersonation: "False"  
  SITES_DeleteExisting: "False" 
  SITES_CodeCopy: "True"  
  site_pkg_name: "Dell.Item.WebApi.Core"  
    
  #NonProdServers 
  ge1servers: g1vmisnapsvc01.olqa.preol.dell.com,g1vmisnapsvc02.olqa.preol.dell.com,g1vmquosvc01.olqa.preol.dell.com,g1vmquosvc02.olqa.preol.dell.com,g1vmdcpqod01.olqa.preol.dell.com,g1vmdcpqod02.olqa.preol.dell.com,ausuw1giiqgw01.aus.amer.dell.com,ausuw1giiqgw02.aus.amer.dell.com
  ge2servers: g2vmisnapsvc01.olqa.preol.dell.com,g2vmisnapsvc02.olqa.preol.dell.com,AUSUW2GIIQGW01.aus.amer.dell.com,AUSUW2GIIQGW02.aus.amer.dell.com,g2vmdcpqod01.olqa.preol.dell.com,g2vmdcpqod02.olqa.preol.dell.com,g2vmquoobg01.olqa.preol.dell.com,g2vmquoobg02.olqa.preol.dell.com,G2VMQUOSVC01.olqa.preol.dell.com,G2VMQUOSVC02.olqa.preol.dell.com 
  ge3servers: g3vmisnapsvc01.olqa.preol.dell.com,g3vmisnapsvc02.olqa.preol.dell.com,g3vmquosvc01.olqa.preol.dell.com,g3vmquosvc02.olqa.preol.dell.com,g3vmdcpqod01.olqa.preol.dell.com,g3vmdcpqod02.olqa.preol.dell.com,ausuw3giiqgw01.aus.amer.dell.com,ausuw3giiqgw02.aus.amer.dell.com 
  ge4servers: g4vmisnapsvc01.olqa.preol.dell.com,g4vmisnapsvc02.olqa.preol.dell.com,g4vmquosvc01.olqa.preol.dell.com,g4vmquosvc02.olqa.preol.dell.com,g4vmdcpqod01.olqa.preol.dell.com,g4vmdcpqod02.olqa.preol.dell.com
  perfservers: p1vmisnapsvc01.olqa.preol.dell.com,p1vmisnapsvc02.olqa.preol.dell.com,P1VMISNAPSVC03.olqa.preol.dell.com,P1VMISNAPSVC04.olqa.preol.dell.com,p1vmquosvc01.olqa.preol.dell.com,p1vmquosvc02.olqa.preol.dell.com
  pc1launchservers: AUSPWPDQOISLL01.aus.amer.dell.com,AUSPWPDQOISLL02.aus.amer.dell.com
  s3blaunchservers: AUSPWSDQOISLL01.aus.amer.dell.com,AUSPWSDQOISLL02.aus.amer.dell.com

  #VMProdServers
  vpod20servers: P20VMCARTITEM01.production.online.dell.com,P20VMCARTITEM02.production.online.dell.com,p20vmisnapsvc01.production.online.dell.com,p20vmisnapsvc02.production.online.dell.com,P20VMQESVC01.production.online.dell.com,P20VMQESVC02.production.online.dell.com,P20VMQESVC03.production.online.dell.com,P20VMQESVC04.production.online.dell.com,P20VMQUOOBG01.production.online.dell.com,P20VMQUOOBG02.production.online.dell.com,P20VMSOGSVC01.production.online.dell.com,P20VMSOGSVC02.production.online.dell.com,P20VMSOSVC01.production.online.dell.com,P20VMSOSVC02.production.online.dell.com
  vpod21servers: P21VMCARTITEM01.production.online.dell.com,P21VMCARTITEM02.production.online.dell.com,p21vmisnapsvc01.production.online.dell.com,p21vmisnapsvc02.production.online.dell.com,P21VMQESVC01.production.online.dell.com,P21VMQESVC02.production.online.dell.com,P21VMQESVC03.production.online.dell.com,P21VMQESVC04.production.online.dell.com,P21VMQUOOBG01.production.online.dell.com,P21VMQUOOBG02.production.online.dell.com,P21VMSOGSVC01.production.online.dell.com,P21VMSOGSVC02.production.online.dell.com,P21VMSOSVC01.production.online.dell.com,P21VMSOSVC02.production.online.dell.com
  vpod60servers: P60VMCARTITEM01.production.online.dell.com,P60VMCARTITEM02.production.online.dell.com,P60vmisnapsvc01.production.online.dell.com,P60vmisnapsvc02.production.online.dell.com,P60VMQESVC01.production.online.dell.com,P60VMQESVC02.production.online.dell.com,P60VMQESVC03.production.online.dell.com,P60VMQESVC04.production.online.dell.com,P60VMQUOOBG01.production.online.dell.com,P60VMQUOOBG02.production.online.dell.com,P60VMSOGSVC01.production.online.dell.com,P60VMSOGSVC02.production.online.dell.com,P60VMSOSVC01.production.online.dell.com,P60VMSOSVC02.production.online.dell.com
  vpod61servers: P61VMCARTITEM01.production.online.dell.com,P61VMCARTITEM02.production.online.dell.com,P61vmisnapsvc01.production.online.dell.com,P61vmisnapsvc02.production.online.dell.com,P61VMQESVC01.production.online.dell.com,P61VMQESVC02.production.online.dell.com,P61VMQESVC03.production.online.dell.com,P61VMQESVC04.production.online.dell.com,P61VMQUOOBG01.production.online.dell.com,P61VMQUOOBG02.production.online.dell.com,P61VMSOGSVC01.production.online.dell.com,P61VMSOGSVC02.production.online.dell.com,P61VMSOSVC01.production.online.dell.com,P61VMSOSVC02.production.online.dell.com
  vpododdservers: P20VMCARTITEM01.production.online.dell.com,P21VMCARTITEM01.production.online.dell.com,P60VMCARTITEM01.production.online.dell.com,P61VMCARTITEM01.production.online.dell.com,p20vmisnapsvc01.production.online.dell.com,p21vmisnapsvc01.production.online.dell.com,p60vmisnapsvc01.production.online.dell.com,p61vmisnapsvc01.production.online.dell.com,P20VMQESVC01.production.online.dell.com,P21VMQESVC01.production.online.dell.com,P60VMQESVC01.production.online.dell.com,P61VMQESVC01.production.online.dell.com,P20VMQESVC03.production.online.dell.com,P21VMQESVC03.production.online.dell.com,P60VMQESVC03.production.online.dell.com,P61VMQESVC03.production.online.dell.com,P20VMQUOOBG01.production.online.dell.com,P21VMQUOOBG01.production.online.dell.com,P60VMQUOOBG01.production.online.dell.com,P61VMQUOOBG01.production.online.dell.com,P20VMSOGSVC01.production.online.dell.com,P21VMSOGSVC01.production.online.dell.com,P60VMSOGSVC01.production.online.dell.com,P61VMSOGSVC01.production.online.dell.com,P20VMSOSVC01.production.online.dell.com,P21VMSOSVC01.production.online.dell.com,P60VMSOSVC01.production.online.dell.com,P61VMSOSVC01.production.online.dell.com
  vpodevenservers: P20VMCARTITEM02.production.online.dell.com,P21VMCARTITEM02.production.online.dell.com,P60VMCARTITEM02.production.online.dell.com,P61VMCARTITEM02.production.online.dell.com,p20vmisnapsvc02.production.online.dell.com,p21vmisnapsvc02.production.online.dell.com,p60vmisnapsvc02.production.online.dell.com,p61vmisnapsvc02.production.online.dell.com,P20VMQESVC02.production.online.dell.com,P21VMQESVC02.production.online.dell.com,P60VMQESVC02.production.online.dell.com,P61VMQESVC02.production.online.dell.com,P20VMQESVC04.production.online.dell.com,P21VMQESVC04.production.online.dell.com,P60VMQESVC04.production.online.dell.com,P61VMQESVC04.production.online.dell.com,P20VMQUOOBG02.production.online.dell.com,P21VMQUOOBG02.production.online.dell.com,P60VMQUOOBG02.production.online.dell.com,P61VMQUOOBG02.production.online.dell.com,P20VMSOGSVC02.production.online.dell.com,P21VMSOGSVC02.production.online.dell.com,P60VMSOGSVC02.production.online.dell.com,P61VMSOGSVC02.production.online.dell.com,P20VMSOSVC02.production.online.dell.com,P21VMSOSVC02.production.online.dell.com,P60VMSOSVC02.production.online.dell.com,P61VMSOSVC02.production.online.dell.com

include: 
  - 'pcf-configs/cicd-stages.yml'    
  - 'pcf-configs/cicd-deploy-launch.yml'
  - 'pcf-configs/cicd-deploy-launch-vm.yml'
  - 'pcf-configs/cicd-deploy-np.yml'
  - 'pcf-configs/cicd-deploy-np-vm.yml'
  - 'pcf-configs/cicd-deploy-p.yml'
  - 'pcf-configs/cicd-deploy-p-vm.yml'
  - 'pcf-configs/cicd-retrofit-np-vm.yml'
  - 'pcf-configs/cicd-verify-deploy-np.yml'
  - 'pcf-configs/rollback-launch.yml'
  - 'pcf-configs/rollback-np.yml'
  - 'pcf-configs/rollback-p.yml'
  - 'pcf-configs/switch-routes-launch.yml'
  - 'pcf-configs/switch-routes-np.yml'
  - 'pcf-configs/switch-routes-p.yml'
  - 'pcf-configs/end-to-end-tests.yml'

# Build job: restore , build and publish
compile-package:
  #image: $DOTNET_IMAGE # windows runners don't need sdk image
  stage: build
  before_script:
    - echo "Starting the dotnet restore, build and publish"
  script:
    - dotnet restore --source https://dcsartifacts.dell.com/artifactory/api/nuget/nuget
    #- dotnet build $BUILD_CSPROJ $BUILD_CONFIGURATION --no-restore /p:Version=$BUILD_VERSION_NUMBER
    - dotnet publish $BUILD_CSPROJ -c $BUILD_CONFIGURATION --no-restore /p:Description="${BUILD_VERSION_NUMBER}.${CI_PIPELINE_ID} ${CI_COMMIT_SHORT_SHA}" --output $TARGET_ITEM
    - octo pack --id="Dell.Item.WebApi.Core" --version="${BUILD_VERSION_NUMBER}.${CI_PIPELINE_ID}" --basePath="$TARGET_ITEM" --outFolder="ProjBinaries/"
  # after_script:
  #   - cp -r $TARGET_ITEM/ ProjBinaries/
  #   - Compress-Archive -Path $CI_PROJECT_DIR/ProjBinaries/* -DestinationPath $CI_PROJECT_DIR/ProjBinaries/Dell.Item.WebApi.Core.${BUILD_VERSION_NUMBER}.zip
  #   - Rename-Item -Path $CI_PROJECT_DIR/ProjBinaries/Dell.Item.WebApi.Core.${BUILD_VERSION_NUMBER}.zip -NewName $CI_PROJECT_DIR/ProjBinaries/Dell.Item.WebApi.Core.${BUILD_VERSION_NUMBER}.nupkg 
  #   #- dotnet tool install Octopus.DotNet.Cli --global
  #   #- dotnet octo pack --id=Dell.Item.WebApi.Core --version=${OCTO_BUILD_NUMBER} --outFolder=ProjBinaries/ --basePath=ProjBinaries/
  artifacts:
    expire_in: 2 week
    paths:
      - $TARGET_ITEM
      - ProjBinaries/
  except: [tags]
  tags:
    - windows-vs2019bt
    #- linux

# Unit test job
#unit-test:
#  image: $DOTNET_IMAGE
#  stage: verify-build
#  variables:    
#    UNIT_TEST_PROJ: >
#                 Dell.Item.Tests/Dell.Item.Tests.csproj,                
#                 Dell.Item.WebApi.Tests/Dell.Item.WebApi.Tests.csproj
#  before_script:
#    - echo "Starting unit tests" 
#  script:
#    - echo "Starting the Dotnet restore and Test"
#    - |
#      IFS=', '
#        read -a CSPROJ_LIST <<< "$UNIT_TEST_PROJ"
#        for CSPROJ in "${CSPROJ_LIST[@]}"
#        do
#          if test -f "$CSPROJ"; then
#            echo dotnet test --configuration $BUILD_CONFIGURATION $CSPROJ
#            dotnet test --configuration $BUILD_CONFIGURATION $CSPROJ --verbosity detailed
#          else
#            echo "$CSPROJ not found" && exit 1
#          fi
#        done
#  after_script:
#    - echo "Complete unit tests"
#  except: [tags]
#  tags:
#    - linux

# sonar quote scan
#code-quality:
#  image: $DOTNET_IMAGE
#  stage: verify-build
#  before_script:
#    - dotnet restore --source https://dcsartifacts.dell.com/artifactory/api/nuget/nuget
#  script:    
#    - dotnet sonarscanner begin /k:"$SONAR_PROJECT_NAME" /n:"$SONAR_PROJECT_NAME" /v:"$CI_JOB_ID" /d:sonar.language="cs" /d:sonar.cs.opencover.reportsPaths=$COVERAGE_FILE /d:sonar.host.url="$SONAR_HOST" /d:sonar.login="$SONAR_LOGIN_TOKEN" /d:sonar.exclusions="$SONAR_EXCLUSIONS"
#    - dotnet build --source https://dcsartifacts.dell.com/artifactory/api/nuget/nuget
#    - dotnet test -c $BUILD_CONFIGURATION $UNIT_TEST_DIR/ --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
#    - dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN_TOKEN"
#    - echo "Validating the status"
#    - sleep 30  # waiting for 30 seconds to the server to process the scanned data and get the latest
#    - curl --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_NAME # displaying the complete quality gate result to user
#    # checking the status of the result from sonar server and fail the job if it fails in sonar server
#    - if [ $(curl --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_NAME | jq -r '.projectStatus.status') == "ERROR" ]; then echo "Sonar Scan is failing in Quality Gates" ; exit 1; fi # failing this job if there is any error in the quality gate conditions
#  after_script:
#    - echo "Sonar qube code quality check is Complete"
#  allow_failure: true # Don't want to fail the pipleine for blueprint, so continue the pipleine if sonar scan fails
#  artifacts:
#    when: always
#    expire_in: 2 week
#    paths:
#      - $COVERAGE_FILE
#  except: [tags]
#  #when: manual    
#  tags:
#      - linux

# CHECKMARX SECURITY SCAN
#sast:checkmarx:
#  stage: verify-build
#  image: harbor.dell.com/docker-store/security-devops:18-v1.3.9
#  variables: &checkmarx-variables
#    CX_PROJECT_NAME: 'CxServer\PAS\Application\item service v1\$CI_PROJECT_NAME'
#    CX_FOLDER_PATH: $CI_PROJECT_DIR
#    CX_COMMENT: $CI_PROJECT_ID
#    CX_OPTIONS: '-Incremental'
#  script:
#    - echo $CI_PROJECT_DIR
#    - echo CX_OPTIONS $CX_OPTIONS
#    - sastctl checkmarx --token="$CHECKMARX_TOKEN" "$CX_PROJECT_NAME" "$CX_FOLDER_PATH" "$CX_COMMENT" 
#  except: [tags]
#  allow_failure: true
#  when: manual 
#  tags:
#    - linux

# Create nuget out of web api published folder
create-artifact:
  image: $DOTNET_IMAGE
  stage: build-artifact
  before_script:
    - dotnet tool install Octopus.DotNet.Cli --tool-path $TARGET_OCTO --version $OCTO_CLI_VERSION
    - export PATH="$PATH:$TARGET_OCTO"
  script:
    - dotnet octo pack --id=Dell.Item.WebApi.Core --version=${BUILD_VERSION_NUMBER}.${CI_PIPELINE_ID} --outFolder=$TARGET_NUGET --basePath=$TARGET_ITEM
  after_script:
    - echo "Completed build artifacts for Item"
  artifacts:
    paths:
     - $TARGET_NUGET
  only: 
    - develop
    - master
    - /^RFY2[1-9]\.(0[1-9]|1[0-2])0[1-4]((-|\.|_)(HF|MIM))?$/
  tags:
    - linux

# Upload nuget pkg to DCS artifactory
.publish-nuget-package:
  image: $JFROG_IMG
  stage: publish-artifact
  before_script:
    - echo "publishing nuget package out of build artifacts to DCSArtifcatory"
  script:
    - jfrog rt u "$TARGET_NUGET/Dell.Item.WebApi.*.nupkg" nuget/DCQO/ --url=$DCS_ARTIFACTORY --user=$PCF_NON_PROD_USER --password=$PCF_NON_PROD_PWD
  after_script:
    - echo "Published to artifactory"
  only: 
    - develop
    - master
    - /^RFY2[1-9]\.(0[1-9]|1[0-2])0[1-4]((-|\.|_)(HF|MIM))?$/
  tags:
    - linux

publish-package-vault:
    stage: publish-artifact
    when: manual
    variables:
       DCSARTIFACTORY: "dcsartifacts.dell.com/artifactory"
    image: harbor.dell.com/devops-images/ubuntu-base-devops:18.04-lts_v3.0.0
    script:
      - pip3 install hashivaultctl==1.0.0  --index-url $VAULT_INDEX
      - echo "Vault Role Id-" $VAULT_ROLE_ID  " is used to access the namespace-" $VAULT_NAMESPACE  "at"  $VAULT_ADDR
      - for i in $(hashivaultctl -s read $ARTIFACT_SECRET_PATH); do export $i; done
      - pkg=`ls $CI_PROJECT_DIR/ProjBinaries/*.nupkg`
      - for i in $pkg; do nval=`basename $i`; splitval=`echo $nval | sed -e 's/[0-9]\.*//g'| sed -e 's/.nupkg//g'`; val=$splitval-$CI_COMMIT_SHORT_SHA.nupkg; mv $CI_PROJECT_DIR/ProjBinaries/$nval $CI_PROJECT_DIR/ProjBinaries/$val;curl -T $CI_PROJECT_DIR/ProjBinaries/$val https://${artifact_username}:${artifact_password}@${DCSARTIFACTORY}/nuget-local/; done
    allow_failure: true
    only:
     - develop
     - master
     - /^RFY2[1-9]\.(0[1-9]|1[0-2])0[1-4]((-|\.|_)(HF|MIM))?$/
    tags:    
        - linux

# Creates octopus release which can be deployed to VPODs using octopus
.create-octo-release:
  image: $DOTNET_IMAGE
  stage: octo-release
  when: manual
  before_script:
    - dotnet tool install Octopus.DotNet.Cli --tool-path $TARGET_OCTO --version $OCTO_CLI_VERSION
    - export PATH="$PATH:$TARGET_OCTO"
  script:
    - dotnet octo create-release --server=$OCTO_URL --apikey=$OCTO_API_KEY --project=$OCTO_PROJ_NAME --releaseNumber=$BUILD_VERSION_NUMBER --packageVersion=$BUILD_VERSION_NUMBER
  after_script:
    - echo "Octopus release $BUILD_VERSION_NUMBER is created"
  # needs: ["route-switch-np-amer-sit"]
  allow_failure: true
  only:
    - develop
    - master
    - /^RFY2[1-9]\.(0[1-9]|1[0-2])0[1-4]((-|\.|_)(HF|MIM))?$/
  tags:
    - linux

retrieve-artifact:
  stage: retrieve-artifact
  image: $DOTNET_IMAGE
  variables:
    TARGET: "Dell.Item.WebApi.Core"
  when: manual
  allow_failure: true
  before_script:
    - echo "Downloading Artifacts" 
  script:
    - wget -O $TARGET.zip https://dcsartifacts.dell.com/artifactory/nuget-local/$TARGET-$CI_COMMIT_SHORT_SHA.nupkg 2>/dev/null
    - unzip -o $TARGET.zip -d $TARGET_ITEM 2>/dev/null
    - dotnet tool install Octopus.DotNet.Cli --global
    - dotnet octo pack --id=Dell.Item.WebApi.Core --outFolder=ProjBinaries/ --basePath=$TARGET_ITEM
  after_script:    
    - echo "Downloaded from Artifactory"
  artifacts:
    expire_in: 2 week
    paths:
      - $TARGET_ITEM
      - ProjBinaries/
  only: [tags]
  tags:
    - linux
